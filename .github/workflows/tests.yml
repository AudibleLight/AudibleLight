name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

env:
  REMOTE: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 300

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2

      - name: Configure Poetry to create virtualenvs inside project
        run: poetry config virtualenvs.in-project true

      - name: Add Poetry to PATH
        run: echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install libsox-dev libsox-fmt-all freeglut3-dev

      - name: Install Python dependencies with Poetry
        run: |
          poetry install --no-interaction --no-root

      - name: Style check with flake8
        shell: bash -l {0}
        run: poetry run flake8 audiblelight --count --select=E9,F63,F7,F82 --show-source --statistics

      # --- Test retries with exit code capture ---
      - name: Run tests with pytest (attempt 1)
        id: test-1
        continue-on-error: true
        run: |
          set -o pipefail
          poetry run pytest -vv --cov-report term-missing --cov-report=xml --cov=audiblelight tests
          EXIT_CODE=$?
          echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT

      - name: Run tests with pytest (attempt 2)
        id: test-2
        if: steps.test-1.outputs.exitcode != '0'
        continue-on-error: true
        run: |
          set -o pipefail
          poetry run pytest -vv --cov-report term-missing --cov-report=xml --cov=audiblelight tests
          EXIT_CODE=$?
          echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT

      - name: Run tests with pytest (attempt 3)
        id: test-3
        if: steps.test-2.outputs.exitcode != '0'
        continue-on-error: true
        run: |
          set -o pipefail
          poetry run pytest -vv --cov-report term-missing --cov-report=xml --cov=audiblelight tests
          EXIT_CODE=$?
          echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT

      - name: Run tests with pytest (attempt 4)
        id: test-4
        if: steps.test-3.outputs.exitcode != '0'
        continue-on-error: true
        run: |
          set -o pipefail
          poetry run pytest -vv --cov-report term-missing --cov-report=xml --cov=audiblelight tests
          EXIT_CODE=$?
          echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT

      - name: Run tests with pytest (attempt 5)
        id: test-5
        if: steps.test-4.outputs.exitcode != '0'
        continue-on-error: true
        run: |
          set -o pipefail
          poetry run pytest -vv --cov-report term-missing --cov-report=xml --cov=audiblelight tests
          EXIT_CODE=$?
          echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT

      - name: Check if all test runs failed
        if: steps.test-1.outputs.exitcode != '0' &&
            steps.test-2.outputs.exitcode != '0' &&
            steps.test-3.outputs.exitcode != '0' &&
            steps.test-4.outputs.exitcode != '0' &&
            steps.test-5.outputs.exitcode != '0'
        run: |
          echo "All test attempts failed"
          exit 1

      - name: Upload coverage to Codecov
        if: success() && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
